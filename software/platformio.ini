; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[env]
platform = espressif32@3.1.1
board = esp32dev
framework = arduino
platform_packages =
    platformio/framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3253de879235e35b48be3b9cb656680837028687

lib_deps = https://github.com/Tinkerforge/ESPAsyncWebServer.git#warp-1.2.1
           https://github.com/Tinkerforge/ArduinoJson#warp-1.2.1
           https://github.com/Tinkerforge/strict_variant#warp-1.2.1
           https://github.com/Tinkerforge/PangolinMQTT#warp-1.2.1
           https://github.com/Tinkerforge/esp32-lib#warp-1.2.1

; If you work on the esp32-lib,
; use file:///home/[your_username]/tf/esp32-lib
; (or whereever your checkout of the lib is)
; instead of https://github.com/Tinkerforge/esp32-lib
; You can force a rebuild of esp32-lib
; by running pio lib uninstall --no-save esp32-lib
; and then recompiling with pio run -e warp
; as usual

monitor_speed = 115200
build_type = release

build_flags = -Os

extra_scripts = pre:pio_hooks.py
                post:merge_firmware_hook.py

; debug_build_flags = -O0 -g2 -ggdb2
upload_port=/dev/ttyUSB0

name = warp
display_name = WARP Charger

backend_modules = Wifi
                  Mqtt
                  Sse
                  Http
                  Firmware Update
                  EVSE
                  SDM72DM
                  Authentication

frontend_modules = EVSE
                   SDM72DM
                   Wifi
                   Mqtt
                   System Start
                   Event Log
                   Firmware Update
                   Authentication
                   System End

[env:warp]
board_build.partitions = default_16MB_coredump.csv

[env:warp4dev]
# use this environment to build for 4MB esp32 for development purposes.
# this will probably not work properly for production due to flash size limitations
upload_port=/dev/cu.usbserial-01A13E71
board_build.partitions = default_4MB.csv
